<<<<<<< HEAD
ggplot(data = partnerAssaults) +
geom_boxplot(mapping = aes(x= boro, y = IPV_Fel_Assault)) + theme_bw()
})
#Bar plot for rape that involved a family member by borough
output$rapebarplot <- renderPlotly({
partner <- partnerInput() # Change to other function
ggplot(data = partner, aes(x = boro, y =IPV_Rape)) +
geom_bar(stat="identity", fill = "#ffeda0") + theme_bw()
})
#Box plot for rape that involved a family member by borough
output$rapeboxplot <- renderPlotly({
partnerRapes <- partnerRapes() # See above
ggplot(data = partnerRapes) +
geom_boxplot(mapping = aes(x= boro, y = IPV_Rape)) + theme_bw()
})
#Data table of whole dataset
output$table <- DT::renderDataTable({
subset(partnerInput(), select = c(boro, Comm_District, IPV_Fel_Assault, DV_Fel_Assault, IPV_Rape, DV_Rape))
})
#Value box of average incidents
output$incidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$IPV_DIR, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average felony assaults
output$assaultBox <- renderValueBox({
partner <- partnerInput()
assault <- round(mean(partner$IPV_Fel_Assault, na.rm = T), 0)
valueBox(subtitle = "Average Number of Felony Assault Incidents Reported", value = assault, icon = icon("gavel"), color = "purple")
})
#Value box of average incidents box, this is the same number as my first value box, the reason I have two is so that users can have a reference
#of the average number of incidents on each page to compare to rape incidents to
output$rapeincidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$IPV_DIR, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average rapes
output$rapeBox <- renderValueBox({
partner <- partnerInput()
rape <- round(mean(partner$IPV_Rape, na.rm = T), 0)
valueBox(subtitle = "Average Number of Rape Incidents Reported", value = rape, icon = icon("gavel"), color = "yellow")
})
observeEvent(input$reset, {
updateSelectInput(session, "boro", selected = c(""))
updateSliderInput(session, "district", value = c(min(partner.load$Comm_District, na.rm = T), max(partner.load$Comm_District, na.rm = T)))
updateSliderInput(session, "assaultcount", value = c(min(partner.load$IPV_Fel_Assault, na.rm = T), max(partner.load$IPV_Fel_Assault, na.rm = T)))
updateSliderInput(session, "rapecount", value = c(min(partner.load$IPV_Rape, na.rm = T), max(partner.load$IPV_Rape, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Imports the token
token <- jsonlite::fromJSON("token.json")$token
borosubset <- read.socrata("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_dist_boro, comm_district, ipv_rape, ipv_fel_assault, ipv_dir", app_token = token)
boro1 <- as.character(unique(borosubset$comm_dist_boro))
district <- as.numeric(unique(borosubset$comm_district))
assault <- as.numeric(unique(borosubset$ipv_fel_assault))
rape <- as.numeric(unique(borosubset$ipv_rape))
remove(borosubset)
#Creates the header of the shiny dashboard
header <- dashboardHeader(title = "NYC Crime Dashboard",
#Creates the content for the notifications menu
dropdownMenu(type = "notifications",
notificationItem(text = "Data updated on September 6, 2018",
icon = icon("calendar")
),
notificationItem(text = "Joint Interest Areas removed from data",
icon = icon("scissors")
=======
rosca.table
rosca.table <- table(rosca$treatment)
addmargins(rosca.table)
rosca.table
# There are 111 individuals in the control group, 195 individuals in the treatment arm lockbox, and 117 individuals in the treatment arm safebox.
rosca.table <- table(rosca$treatment)
addmargins(rosca.table)
# There are 111 individuals in the control group, 195 individuals in the treatment arm lockbox, and 117 individuals in the treatment arm safebox.
rosca.table <- table(rosca$treatment, rosca$has_followup2, na.rm = T)
rosca.table <- table(rosca$treatment, rosca$has_followup2)
rosca.table <- table(rosca$treatment, rosca$has_followup2)
rosca.table
help()
subset(rosca$has_followup2, 1)
rosca.table <- table(rosca$treatment, rosca$has_followup2[1])
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
rosca.table
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
rosca.table
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment)
# There are 111 individuals in the control group, 195 individuals in the treatment arm lockbox, and 117 individuals in the treatment arm safebox.
rosca.table <- table(rosca$treatment)
addmargins(rosca.table)
# There are 111 individuals in the control group, 195 individuals in the treatment arm lockbox, and 117 individuals in the treatment arm safebox.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
subset(rosca, has_followup2==1)
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
rosca.followup <- subset(rosca, has_followup2==1)
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
View(rosca.followup)
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- rosca.table - rosca.followup
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- rosca.table - rosca.followup / rosca.table
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.table <- table(rosca$treatment, rosca$has_followup2==1)
addmargins(rosca.table)
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- rosca.table - rosca.followup / rosca.table
drop
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- rosca.table - rosca.followup / rosca.table
drop
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- rosca.table - rosca.followup / rosca.table
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- (rosca.table - rosca.followup) / rosca.table
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
dropout <- (rosca.table - rosca.followup) / rosca.table
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
followup<- table(rosca.followup$treatment)
dropout <- (rosca.table - rosca.followup) / rosca.table
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
rosca.followup <- subset(rosca, has_followup2==1)
followup.table <- table(rosca.followup$treatment)
dropout <- (rosca.table - followup.table) / rosca.table
rosca.table <- table(rosca$treatment)
rosca.table
addmargins(rosca.table)
# There are 111 individuals in the control group, 195 individuals in the treatment arm lockbox, and 117 individuals in the treatment arm safebox.
rosca.followup <- subset(rosca, has_followup2==1)
followup.table <- table(rosca.followup$treatment)
followup.table
dropout <- (rosca.table - followup.table) / rosca.table
dropout
# How many participants are left in each group of this subset?
# In the control group there are 102 individuals who participated in the second follow-up, 184 individuals in the lockbox group, and 107 individuals in the safebox group.
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest[1] - invest[2]
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff.sc <- invest[2] - invest[1]
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff.sc <- invest[2] - invest[1]
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff.sc <- invest[2] - invest[1]
invest.diff.sc
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff.lc <- invest[2] - invest[1]
invest.diff.sc <- invest[3] - invest[1]
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
# Difference in mean amounts between control and lockbox
invest.diff.lc <- invest[2] - invest[1]
invest.diff.lc
# Difference in mean amounts between control and safebox
invest.diff.sc <- invest[3] - invest[1]
invest.diff.sc
##gender
demographic.control <- table( c(rosca$treatment, rosca$bg_female, rosca$bg_b1_age, rosca$bg_married))
demographic.control
##gender
demographic.control <- table(rosca$treatment, rosca$bg_female, rosca$bg_b1_age, rosca$bg_married))
##gender
demographic.control <- table( c(rosca$treatment, rosca$bg_female, rosca$bg_b1_age, rosca$bg_married))
demographic.control
##gender
demographic.control <- table( c(rosca$treatment =1, rosca$bg_female =1, rosca$bg_b1_age=1, rosca$bg_married=1))
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff <- c((invest[3] - invest[2]), (invest[3] - invest[1]), (invest[2] - invest[1]))
names(invest.diff) <- c("Safebox - Lockbox", "Safebox - Control", "Lockbox - Control")
# Briefly interpret the results
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff <- c((invest[3] - invest[2]), (invest[3] - invest[1]), (invest[2] - invest[1]))
names(invest.diff) <- c("Safebox - Lockbox", "Safebox - Control", "Lockbox - Control")
invest.diff
# Briefly interpret the results
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
invest
invest.diff <- c((invest[3] - invest[2]), (invest[3] - invest[1]), (invest[2] - invest[1]))
names(invest.diff) <- c("Safebox - Lockbox", "Safebox - Control", "Lockbox - Control")
invest.diff
# Briefly interpret the results
# Yes having a safe box does increase the amount invested in health products. This is shown by the difference in average amount invested between safebox and control being the largest at 150 Kenyan shillings.
##gender
demographic.control <- tapply(rosca$bg_female, rosca$treatment, mean, na.rm= T)
demographic.control
##gender
tapply(rosca$bg_female, rosca$treatment, mean, na.rm= T)
##gender
tapply(rosca$bg_female, rosca$treatment, mean, na.rm= T)
##age
tapply(rosca$bg_b1_age, rosca$treatment, mean, na.rm= T)
##marital status
tapply(rosca$bg_married, rosca$treatment, mean, na.rm= T)
##for married women
married.women <- subset(rosca, bg_female ==1 & bg_married ==1)
tapply(married_women$fol2_amtinvest, married_women$treatment, mean, na.rm = T)
##for married women
married.women <- subset(rosca, bg_female ==1 & bg_married ==1)
tapply(married.women$fol2_amtinvest, married.women$treatment, mean, na.rm = T)
##for unmarried women
unmarried.women <- subset(rosca, bg_female ==1 & bg_married ==0)
tapply(unmarried.women$fol2_amtinvest, unmarried.women$treatment, mean, na.rm = T)
library(swirl)
swirl()
TRUE | FALSE != FALSE
head(resume)
dim(resume)
summary(resume)
table(resume$call, resume$sex)
table( call = resume$call, sex = resume$sex)
table(sex = resume$sex, call = resume$call)
invest
invest <- tapply(rosca$fol2_amtinvest, rosca$treatment, mean, na.rm = T)
require(ggplot2)
require(plotly)
library(knitr)
opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/')
# Data Stuff
require(dplyr)
require(tibble)
require(reshape2)
require(scales)
require(RColorBrewer)
pdf(NULL)
ui <- fluidpage(
#titlePanel defines the application title
titlePanel("Diamonds Dataset"),
#Fuctions for the sidebar
sidebarLayout(
sidebarPanel(
selectInput("")
)
)
)
require(ggplot2)
require(plotly)
library(knitr)
opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/')
# Data Stuff
require(dplyr)
require(tibble)
require(reshape2)
require(scales)
require(RColorBrewer)
pdf(NULL)
diamonds <- diamonds
View(diamonds)
cut
diamonds$cut
# Class 4 ggplot2 Examples
require(ggplot2)
require(plotly)
library(knitr)
opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/')
# Data Stuff
require(dplyr)
require(tibble)
require(reshape2)
require(scales)
require(RColorBrewer)
pdf(NULL)
diamonds <- diamonds
mtcars <- mtcars %>%
rownames_to_column()
iris <- iris
starwars <- starwars
airquality <- airquality %>%
mutate(Date = as.Date(paste0("1973-", Month, "-", Day)))
ggplot(data = mtcars, aes(x = hp, y = drat, color = as.factor(cyl))) +
geom_point() +
scale_color_brewer(palette = "Oranges") +
facet_wrap(~as.factor(gear))
#Color changes the color of teh outline and fill changes the color inside the bars
ggplot(data = diamonds, aes(x=cut, fill = cut)) +
geom_bar(stat = "count") +
scale_y_continuous(labels = comma) +
ggtitle("Count of Diamonds by Cut") +
xlab("Cut") +
ylab("Count of Diamonds") +
scale_fill_brewer(palette = "Set1")
diamonds$color
#Functions for the Diamond Table
ggplot(data = diamonds, aes(x=color, fill = color)) +
geom_bar(stat = "percent") +
ggtitle("Percent of Diamonds by Color") +
xlab("Color") +
ylab("Perecent of Diamonds") +
scale_fill_brewer(palette = "Blues")
#Functions for the Diamond Table
ggplot(data = diamonds, aes(x=color, fill = color)) +
geom_bar(stat = "count") +
ggtitle("Count of Diamonds by Color") +
xlab("Color") +
ylab("Count of Diamonds") +
scale_fill_brewer(palette = "Blues")
#Functions for the Diamond Table
ggplot(data = diamonds, aes(x=color, fill = color)) +
geom_bar(stat = "count") +
scale_y_continuous(labels = comma) +
ggtitle("Count of Diamonds by Color") +
xlab("Color") +
ylab("Count of Diamonds") +
scale_fill_brewer(palette = "Blues")
ggplotly(
ggplot(data = airquality, aes(x = Date, y = Wind, group = 1, text = paste0("<b>", format(Date, "%B %d"), "</b>: ", Wind))) +
geom_point() +
geom_line(),
tooltip = "text"
)
#format() allows you to change the date formatting
#paste0 allows you to add a space after
ggplotly(
ggplot(data = airquality, aes(x = Date, y = Wind, group = 1, text = paste0("<b>", format(Date, "%B %d"), "</b>: ", Wind)))
)
ggplotly(
ggplot(data = mtcars, aes(x = hp, y = drat, color = as.factor(cyl))) +
geom_point() +
scale_color_brewer(palette = "Oranges")
>>>>>>> 7622f9c94746f883cf557c5c276f0cea43319d58
)
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 70, color = "green",
"Downloading Data")
),
#Creates the content for the messages menu
dropdownMenu(type = "messages",
messageItem(
from = "NYC Open Data",
message = HTML("This data is collected by The Mayor's <br> Office to Combat Domestic Violence"),
icon = icon("institution"),
time = "3:55"
),
messageItem(
from = "New User",
message = HTML("Is it possible to get notified when <br> the data is updated?"),
icon = icon("question"),
time = "4:00"
)
)
)
#Creates the sidebar of the shiny dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
id = "tabs",
#Creates pages in the sidebar
menuItem("Felony Assault Incidents", icon = icon("balance-scale"), tabName = "assault"),
menuItem("Rape Incidents", icon = icon("balance-scale"), tabName = "rape"),
menuItem("Complete Dataset", icon = icon("database"), tabName = "table"),
#Creates borough select input
selectInput("boro",
"Boroughs:",
choices = sort(boro1),
multiple = TRUE,
selected = TRUE),
#Creates Community District slider input
sliderInput("district",
"Community Districts:",
min = min(district, na.rm = T),
max = max(district, na.rm = T),
value = c(min(district, na.rm = T),
max(district, na.rm = T)),
step = 1),
actionButton("reset", "Reset Filters", icon = icon("refresh"))
)
)
#Creates the body of the shiny dashboard
body <- dashboardBody(tabItems(
#Creates the felony assault page
tabItem("assault",
fluidRow(
valueBoxOutput("incidentsBox"),
valueBoxOutput("assaultBox")
),
fluidRow(
box(
sliderInput("assaultcount",
HTML("Change the Range of <br> Felony Assault Incidents <br> in the Box Plot:"),
min = min(assault, na.rm = T),
max = max(assault, na.rm = T),
value = c(min(assault, na.rm = T), max(assault, na.rm = T)),
step = 10)
),
tabBox(width = 12,
tabPanel("Bar Plot", plotlyOutput("assaultbarplot")),
tabPanel("Box Plot", plotlyOutput("assaultboxplot"))
)
)
),
tabItem("rape",
fluidRow(
valueBoxOutput("rapeincidentsBox"),
valueBoxOutput("rapeBox")
),
fluidRow(
box(
sliderInput("rapecount",
HTML("Change the Range of <br> Rape Incidents in the Box Plot:"),
min = min(rape, na.rm = T),
max = max(rape, na.rm = T),
value = c(min(rape, na.rm = T), max(rape, na.rm = T)),
step = 1)
),
tabBox(width = 12,
tabPanel("Bar Plot", plotlyOutput("rapebarplot")),
tabPanel("Box Plot", plotlyOutput("rapeboxplot"))
)
)
),
tabItem("table",
fluidPage(
box(title = "Complete Intimate Partner Violence Dataset", DT::dataTableOutput("table"), width = 12
)
)
)
)
)
ui <- dashboardPage(header, sidebar, body, skin = "black")
# Define server logic
server <- function(input, output, session = session) {
#Reactive function for all pages (global inputs)
partnerInput <- reactive({
if (length(input$district) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=comm_district >= '",
input$district[1], comm_district, input$district[2], comm_district))
}
# Allows for the slider input to be reactive
#filter(Comm_District >= input$district[1] & Comm_District <= input$district[2])
# Allows for the select input to be reactive
if (length(input$boro) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=comm_dist_boro >= '", input$boro, comm_dist_boro))
#partner <- subset(partner, boro %in% input$boro)
}
return(partner)
})
#Reactive Function for Assaults Page (local input)
partnerAssaults <- reactive({
if (length(input$assaultcount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=ipv_fel_assault >= '", input$assaultcount[1], ipv_fel_assault, input$assaultcount[2], ipv_fel_assault))
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Fel_Assault >= input$assaultcount[1] & IPV_Fel_Assault <= input$assaultcount[2])
return(partner)
})
#Reactive Function for Rape Page (local input)
partnerRapes <- reactive({
if (length(input$rapecount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=ipv_rape >= '", input$rapecount[1], ipv_rape, input$rapecount[2], ipv_rape))
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Rape >= input$rapecount[1] & IPV_Rape <= input$rapecount[2])
return(partner)
})
#Bar plot for felony assault that involved a family member by borough
output$assaultbarplot <- renderPlotly({
partner <- partnerInput() # Then this needs to be partnerAssaults
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_fel_assault)) +
geom_bar(stat="identity", fill = "#bcbddc") + theme_bw()
})
#Box plot for felony assault that involved a family member by borough
output$assaultboxplot <- renderPlotly({
partnerAssaults <- partnerAssaults() # Same as above
ggplot(data = partnerAssaults) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_fel_assault)) + theme_bw()
})
#Bar plot for rape that involved a family member by borough
output$rapebarplot <- renderPlotly({
partner <- partnerInput() # Change to other function
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_rape)) +
geom_bar(stat="identity", fill = "#ffeda0") + theme_bw()
})
#Box plot for rape that involved a family member by borough
output$rapeboxplot <- renderPlotly({
partnerRapes <- partnerRapes() # See above
ggplot(data = partnerRapes) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_rape)) + theme_bw()
})
#Data table of whole dataset
output$table <- DT::renderDataTable({
subset(partnerInput(), select = c(comm_dist_boro, comm_district, ipv_fel_assault, ipv_rape, ipv_dir))
})
#Value box of average incidents
output$incidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average felony assaults
output$assaultBox <- renderValueBox({
partner <- partnerInput()
assault <- round(mean(partner$ipv_fel_assault, na.rm = T), 0)
valueBox(subtitle = "Average Number of Felony Assault Incidents Reported", value = assault, icon = icon("gavel"), color = "purple")
})
#Value box of average incidents box, this is the same number as my first value box, the reason I have two is so that users can have a reference
#of the average number of incidents on each page to compare to rape incidents to
output$rapeincidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average rapes
output$rapeBox <- renderValueBox({
partner <- partnerInput()
rape <- round(mean(partner$ipv_rape, na.rm = T), 0)
valueBox(subtitle = "Average Number of Rape Incidents Reported", value = rape, icon = icon("gavel"), color = "yellow")
})
observeEvent(input$reset, {
updateSelectInput(session, "boro", selected = c(""))
updateSliderInput(session, "district", value = c(min(district, na.rm = T), max(district, na.rm = T)))
updateSliderInput(session, "assaultcount", value = c(min(assault, na.rm = T), max(assault, na.rm = T)))
updateSliderInput(session, "rapecount", value = c(min(rape, na.rm = T), max(rape, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
partner <- select(comm_district_boro, comm_district, ipv_fel_assault, ipv_rape)
runApp()
runApp()
runApp()
runApp()
library(httr)
install.packages("httr")
install.packages("httr")
runApp()
runApp()
# Define server logic
server <- function(input, output, session = session) {
#Reactive function for all pages (global inputs)
partnerInput <- reactive({
if (length(input$district) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=comm_district >='",
input$district[1], "comm_district <='", input$district[2], "comm_district"), app_token = token)
}
# Allows for the slider input to be reactive
#filter(Comm_District >= input$district[1] & Comm_District <= input$district[2])
# Allows for the select input to be reactive
if (length(input$boro) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=comm_dist_boro >= ",
input$boro, "comm_dist_boro"), app_token = token)
#partner <- subset(partner, boro %in% input$boro)
}
partner <- select(partner,c("comm_district_boro", "comm_district", "ipv_fel_assault", "ipv_rape"))
return(partner)
})
#Reactive Function for Assaults Page (local input)
partnerAssaults <- reactive({
if (length(input$assaultcount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=ipv_fel_assault >= ",
input$assaultcount[1], "ipv_fel_assault", input$assaultcount[2], "ipv_fel_assault"), app_token = token)
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Fel_Assault >= input$assaultcount[1] & IPV_Fel_Assault <= input$assaultcount[2])
return(partner)
})
#Reactive Function for Rape Page (local input)
partnerRapes <- reactive({
if (length(input$rapecount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=ipv_rape >= '",
input$rapecount[1], "ipv_rape", input$rapecount[2], "ipv_rape"), app_token = token)
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Rape >= input$rapecount[1] & IPV_Rape <= input$rapecount[2])
return(partner)
})
#Bar plot for felony assault that involved a family member by borough
output$assaultbarplot <- renderPlotly({
partner <- partnerInput() # Then this needs to be partnerAssaults
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_fel_assault)) +
geom_bar(stat="identity", fill = "#bcbddc") + theme_bw()
})
#Box plot for felony assault that involved a family member by borough
output$assaultboxplot <- renderPlotly({
partnerAssaults <- partnerAssaults() # Same as above
ggplot(data = partnerAssaults) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_fel_assault)) + theme_bw()
})
#Bar plot for rape that involved a family member by borough
output$rapebarplot <- renderPlotly({
partner <- partnerInput() # Change to other function
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_rape)) +
geom_bar(stat="identity", fill = "#ffeda0") + theme_bw()
})
#Box plot for rape that involved a family member by borough
output$rapeboxplot <- renderPlotly({
partnerRapes <- partnerRapes() # See above
ggplot(data = partnerRapes) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_rape)) + theme_bw()
})
#Data table of whole dataset
output$table <- DT::renderDataTable({
subset(partnerInput(), select = c(comm_dist_boro, comm_district, ipv_fel_assault, ipv_rape, ipv_dir))
})
#Value box of average incidents
output$incidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average felony assaults
output$assaultBox <- renderValueBox({
partner <- partnerInput()
assault <- round(mean(partner$ipv_fel_assault, na.rm = T), 0)
valueBox(subtitle = "Average Number of Felony Assault Incidents Reported", value = assault, icon = icon("gavel"), color = "purple")
})
#Value box of average incidents box, this is the same number as my first value box, the reason I have two is so that users can have a reference
#of the average number of incidents on each page to compare to rape incidents to
output$rapeincidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average rapes
output$rapeBox <- renderValueBox({
partner <- partnerInput()
rape <- round(mean(partner$ipv_rape, na.rm = T), 0)
valueBox(subtitle = "Average Number of Rape Incidents Reported", value = rape, icon = icon("gavel"), color = "yellow")
})
observeEvent(input$reset, {
updateSelectInput(session, "boro", selected = c(""))
updateSliderInput(session, "district", value = c(min(district, na.rm = T), max(district, na.rm = T)))
updateSliderInput(session, "assaultcount", value = c(min(assault, na.rm = T), max(assault, na.rm = T)))
updateSliderInput(session, "rapecount", value = c(min(rape, na.rm = T), max(rape, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
# Define server logic
server <- function(input, output, session = session) {
#Reactive function for all pages (global inputs)
partnerInput.test <- reactive({
if (length(input$district) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=comm_district >='",
input$district[1], "comm_district <='", input$district[2], "comm_district"), app_token = token)
}
# Allows for the slider input to be reactive
#filter(Comm_District >= input$district[1] & Comm_District <= input$district[2])
# Allows for the select input to be reactive
if (length(input$boro) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=comm_dist_boro >= ",
input$boro, "comm_dist_boro"), app_token = token)
#partner <- subset(partner, boro %in% input$boro)
}
partner <- select(partner,c("comm_district_boro", "comm_district", "ipv_fel_assault", "ipv_rape"))
return(partner)
})
#Reactive Function for Assaults Page (local input)
partnerAssaults <- reactive({
if (length(input$assaultcount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$where=ipv_fel_assault >= ",
input$assaultcount[1], "ipv_fel_assault", input$assaultcount[2], "ipv_fel_assault"), app_token = token)
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Fel_Assault >= input$assaultcount[1] & IPV_Fel_Assault <= input$assaultcount[2])
return(partner)
})
#Reactive Function for Rape Page (local input)
partnerRapes <- reactive({
if (length(input$rapecount) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?where=ipv_rape >= '",
input$rapecount[1], "ipv_rape", input$rapecount[2], "ipv_rape"), app_token = token)
}
#Allows for the slider input of felony assaults to be reactive for the boxplot
#partner <- partnerInput() %>%
#filter(IPV_Rape >= input$rapecount[1] & IPV_Rape <= input$rapecount[2])
return(partner)
})
#Bar plot for felony assault that involved a family member by borough
output$assaultbarplot <- renderPlotly({
partner <- partnerInput() # Then this needs to be partnerAssaults
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_fel_assault)) +
geom_bar(stat="identity", fill = "#bcbddc") + theme_bw()
})
#Box plot for felony assault that involved a family member by borough
output$assaultboxplot <- renderPlotly({
partnerAssaults <- partnerAssaults() # Same as above
ggplot(data = partnerAssaults) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_fel_assault)) + theme_bw()
})
#Bar plot for rape that involved a family member by borough
output$rapebarplot <- renderPlotly({
partner <- partnerInput() # Change to other function
ggplot(data = partner, aes(x = comm_dist_boro, y =ipv_rape)) +
geom_bar(stat="identity", fill = "#ffeda0") + theme_bw()
})
#Box plot for rape that involved a family member by borough
output$rapeboxplot <- renderPlotly({
partnerRapes <- partnerRapes() # See above
ggplot(data = partnerRapes) +
geom_boxplot(mapping = aes(x= comm_dist_boro, y = ipv_rape)) + theme_bw()
})
#Data table of whole dataset
output$table <- DT::renderDataTable({
subset(partnerInput(), select = c(comm_dist_boro, comm_district, ipv_fel_assault, ipv_rape, ipv_dir))
})
#Value box of average incidents
output$incidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average felony assaults
output$assaultBox <- renderValueBox({
partner <- partnerInput()
assault <- round(mean(partner$ipv_fel_assault, na.rm = T), 0)
valueBox(subtitle = "Average Number of Felony Assault Incidents Reported", value = assault, icon = icon("gavel"), color = "purple")
})
#Value box of average incidents box, this is the same number as my first value box, the reason I have two is so that users can have a reference
#of the average number of incidents on each page to compare to rape incidents to
output$rapeincidentsBox <- renderValueBox({
partner <- partnerInput()
incidents <- round(mean(partner$ipv_dir, na.rm = T), 0)
valueBox(subtitle = "Average Number of Incidents Reported", value = incidents , icon = icon("gavel"), color = "teal")
})
#Value box of average rapes
output$rapeBox <- renderValueBox({
partner <- partnerInput()
rape <- round(mean(partner$ipv_rape, na.rm = T), 0)
valueBox(subtitle = "Average Number of Rape Incidents Reported", value = rape, icon = icon("gavel"), color = "yellow")
})
observeEvent(input$reset, {
updateSelectInput(session, "boro", selected = c(""))
updateSliderInput(session, "district", value = c(min(district, na.rm = T), max(district, na.rm = T)))
updateSliderInput(session, "assaultcount", value = c(min(assault, na.rm = T), max(assault, na.rm = T)))
updateSliderInput(session, "rapecount", value = c(min(rape, na.rm = T), max(rape, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
View(server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
borosubset <- read.socrata("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_dist_boro, comm_district, ipv_rape, ipv_fel_assault, ipv_dir", app_token = token)
View(borosubset)
runApp()
runApp()
if (length(input$district) > 0 ) {
partner <- read.socrata(paste0("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_district")) #>= input$district[1],
#comm_district <= input$district[2]), app_token = token)
}
borosubset.api <- read.socrata("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_dist_boro, comm_district, ipv_rape, ipv_fel_assault, ipv_dir", app_token = token)
response<-httr::GET(borosubset.api)
dat<-read_csv(response$content)
runApp()
runApp()
<<<<<<< HEAD
=======
shiny::runApp()
borosubset <- read.socrata("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_dist_boro, comm_district, ipv_rape, ipv_fel_assault, ipv_dir", app_token = token)
#Project 1 Update to attempt to do HW 4
#Using Shinydashboard
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
library(shinythemes)
library(RSocrata)
library(httr)
pdf(NULL)
#Imports the token
token <- jsonlite::fromJSON("token.json")$token
borosubset <- read.socrata("https://data.cityofnewyork.us/resource/ki38-k49c.json?$select=comm_dist_boro, comm_district, ipv_rape, ipv_fel_assault, ipv_dir", app_token = token)
runApp()
>>>>>>> 7622f9c94746f883cf557c5c276f0cea43319d58
